# tabs/comparaison_tab.py
import streamlit as st
import pandas as pd
import plotly.express as px
from dataclasses import asdict
from config import AppConfig
from charts import afficher_graphique_economies_cumulees
from utils import calculer_couts_voiture

def display_comparaison_tab(resultats_velo_min, resultats_velo_max, profil_data):
    """Affiche le contenu de l'onglet de comparaison avec une allocation des co√ªts par fourchette."""
    st.header("Analyse comparative du trajet domicile-travail")
    st.info("""
    La simulation est pr√©sent√©e sous forme de fourchette (min/max) bas√©e sur votre usage du v√©lo.
    Le sc√©nario **pessimiste** combine le co√ªt le plus √©lev√© du v√©lo avec le co√ªt le plus bas de la voiture.
    Le sc√©nario **optimiste** combine le co√ªt le plus bas du v√©lo avec le co√ªt le plus √©lev√© de la voiture.
    """)

    if resultats_velo_min and resultats_velo_max and profil_data:
        # --- Fonction de calcul pour un sc√©nario ---
        def calculer_cout_voiture_pour_trajet(km_velotaf, params_voiture):
            params_voiture.km_domicile_travail = km_velotaf
            resultats_voiture_scenario = calculer_couts_voiture(params_voiture)
            
            km_total = params_voiture.km_domicile_travail + params_voiture.km_autres
            proportion = km_velotaf / km_total if km_total > 0 else 0
            
            return resultats_voiture_scenario.cout_annuel * proportion

        # --- Calculs pour la fourchette ---
        params_voiture_base = st.session_state.voiture_params
        
        cout_voiture_min = calculer_cout_voiture_pour_trajet(resultats_velo_min.km_an, params_voiture_base)
        cout_voiture_max = calculer_cout_voiture_pour_trajet(resultats_velo_max.km_an, params_voiture_base)

        cout_velo_min = resultats_velo_min.cout_annuel_fmd
        cout_velo_max = resultats_velo_max.cout_annuel_fmd
        
        economie_min = cout_voiture_min - cout_velo_max  # Cas le plus d√©favorable
        economie_max = cout_voiture_max - cout_velo_min  # Cas le plus favorable
        
        # --- Affichage de la comparaison ---
        st.markdown("---")
        st.subheader("üí∞ Co√ªt annuel du trajet (Fourchette Min-Max)")
        
        st.markdown("##### Co√ªt du v√©lo")
        v_col1, v_col2 = st.columns(2)
        v_col1.metric("Min (optimiste)", f"{cout_velo_min:.0f}‚Ç¨")
        v_col2.metric("Max (pessimiste)", f"{cout_velo_max:.0f}‚Ç¨")

        st.markdown("##### Co√ªt de la voiture (part allou√©e au trajet)")
        c_col1, c_col2 = st.columns(2)
        c_col1.metric("Min (usage faible)", f"{cout_voiture_min:.0f}‚Ç¨")
        c_col2.metric("Max (usage √©lev√©)", f"{cout_voiture_max:.0f}‚Ç¨")

        st.markdown("---")
        st.subheader("‚úÖ √âconomie annuelle finale")

        if economie_max > 0:
            eco_col1, eco_col2 = st.columns(2)
            eco_col1.metric("√âconomie minimale", f"{max(0, economie_min):.0f}‚Ç¨")
            eco_col2.metric("√âconomie maximale", f"{economie_max:.0f}‚Ç¨")
            
            st.markdown("---")
            st.subheader("‚ú® Vos gains en d√©tail (bas√© sur un sc√©nario moyen)")
            
            eco_moyenne = (economie_min + economie_max) / 2
            if eco_moyenne > 0:
                afficher_graphique_economies_cumulees(eco_moyenne)
            
            co2_economise_moyen = ((resultats_velo_min.km_an + resultats_velo_max.km_an) / 2 * AppConfig.CO2_VOITURE_G_PAR_KM) / 1000
            arbres_equivalents = co2_economise_moyen / AppConfig.CO2_ABSORPTION_ARBRE_KG_PAR_AN
            cafes_par_mois = (eco_moyenne / AppConfig.PRIX_MOYEN_CAFE) / 12

            g_col1, g_col2, g_col3 = st.columns(3)
            g_col1.metric("CO‚ÇÇ √©conomis√©", f"~{co2_economise_moyen:.0f} kg/an")
            g_col2.metric("üå≥ √âquivalent Arbres", f"~{arbres_equivalents:.1f}")
            g_col3.metric("‚òï Caf√©s offerts / mois", f"~{cafes_par_mois:.1f}")

        else:
            st.warning("Selon cette simulation, le v√©lo co√ªterait plus cher que la voiture, m√™me dans le sc√©nario le plus optimiste.")
    else:
        st.warning("Veuillez configurer un profil de v√©lo pour acc√©der √† la comparaison.")